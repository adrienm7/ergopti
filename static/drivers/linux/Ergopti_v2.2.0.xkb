xkb_keymap        {

    xkb_keycodes      { include "evdev+aliases(azerty)" };

    xkb_types         { 
        include "complete"

        type "FOUR_LEVEL_SEMIALPHABETIC_CONTROL" {
            modifiers = Shift+Lock+LevelThree+Control;
            
            map[None] = Level1;
            map[Shift] = Level2;
            map[Lock]  = Level2;
            map[LevelThree] = Level3;
            map[Shift+LevelThree] = Level4;
            map[Lock+LevelThree] =  Level3;
            map[Lock+Shift+LevelThree] = Level4;
            map[Control]  = Level5;
            
            preserve[Control] = Control;
            preserve[Shift+Control] = Control;
            preserve[Lock+LevelThree] = Lock;
            preserve[Lock+Shift+LevelThree] = Lock;
            
            level_name[Level1] = "Base";
            level_name[Level2] = "Shift";
            level_name[Level3] = "Alt Base";
            level_name[Level4] = "Shift Alt";
            level_name[Level5] = "Control";
        };
                
    };

    xkb_compatibility { include "complete" };

    partial alphanumeric_keys
    xkb_symbols "ergopti_iso_22" {

        name[Group1]= "France - Ergopti ISO v2.2.0";

        include "latin"

        // Space bar
        key <SPCE> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [space, minus, underscore, underscore, space] }; //   - _ _  

        // Digits
        key <TLDE> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [dollar, EuroSign, EuroSign, dead_2, dollar] }; // $ " €" € ¤ $
        key <AE01> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [1, 1, onesuperior, NoSymbol, 1] }; // 1 1 ¹ ₁ 1
        key <AE02> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [2, 2, twosuperior, NoSymbol, 2] }; // 2 2 ² ₂ 2
        key <AE03> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [3, 3, threesuperior, NoSymbol, 3] }; // 3 3 ³ ₃ 3
        key <AE04> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [4, 4, NoSymbol, NoSymbol, 4] }; // 4 4 ⁴ ₄ 4
        key <AE05> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [5, 5, NoSymbol, NoSymbol, 5] }; // 5 5 ⁵ ₅ 5
        key <AE06> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [6, 6, NoSymbol, NoSymbol, 6] }; // 6 6 ⁶ ₆ 6
        key <AE07> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [7, 7, NoSymbol, NoSymbol, 7] }; // 7 7 ⁷ ₇ 7
        key <AE08> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [8, 8, NoSymbol, NoSymbol, 8] }; // 8 8 ⁸ ₈ 8
        key <AE09> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [9, 9, NoSymbol, NoSymbol, 9] }; // 9 9 ⁹ ₉ 9
        key <AE10> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [0, 0, NoSymbol, NoSymbol, 0] }; // 0 0 ⁰ ₀ 0
        key <AE11> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [percent, percent, NoSymbol, NoSymbol, minus] }; // % " %" ‰ ‱ -
        key <AE12> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [equal, masculine, degree, ordfeminine, plus] }; // = º ° ª +

        // Letters — Row 1/3
        key <AD01> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [egrave, egrave, grave, doublelowquotemark, z] }; // è è ` „ z
        key <AD02> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [y, y, at, EuroSign, y] }; // y y @ € y
        key <AD03> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [o, o, oe, OE, o] }; // o o œ Œ o
        key <AD04> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [w, w, ugrave, Ugrave, w] }; // w w ù Ù w
        key <AD05> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [b, b, guillemotleft, leftdoublequotemark, b] }; // b b "« " “ b
        key <AD06> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [f, f, nobreakspace, rightdoublequotemark, f] }; // f f " »" ” f
        key <AD07> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [g, g, asciitilde, NoSymbol, g] }; // g g ~ ≈ g
        key <AD08> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [h, h, numbersign, percent, h] }; // h h # % h
        key <AD09> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [c, c, ccedilla, Ccedilla, c] }; // c c ç Ç c
        key <AD10> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [x, x, asterisk, multiply, x] }; // x x * × x
        key <AD11> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [z, z, percent, NoSymbol, z] }; // z z % ‰ z
        key <AD12> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [dead_3, NoSymbol, nobreakspace, nobreakspace, dead_3] }; // ¨       ¨

        // Letters — Row 2/3
        key <AC01> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [a, a, less, lessthanequal, a] }; // a a < ≤ a
        key <AC02> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [i, i, greater, greaterthanequal, i] }; // i i > ≥ i
        key <AC03> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [e, e, braceleft, dead_5, e] }; // e e { ᵉ e
        key <AC04> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [u, u, braceright, dead_4, u] }; // u u } µ u
        key <AC05> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [period, nobreakspace, colon, periodcentered, period] }; // . " :" : · .
        key <AC06> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [v, v, bar, brokenbar, v] }; // v v | ¦ v
        key <AC07> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [s, s, parenleft, emdash, s] }; // s s ( — s
        key <AC08> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [n, n, parenright, endash, n] }; // n n ) – n
        key <AC09> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [t, t, bracketleft, dead_3, t] }; // t t [ ¨ t
        key <AC10> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [r, r, bracketright, dead_7, r] }; // r r ] ℝ r
        key <AC11> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [q, q, rightsinglequotemark, dead_2, q] }; // q q ’ ¤ q
        key <BKSL> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [dead_1, exclam, exclam, exclamdown, dead_1] }; // ^ " !" ! ¡ ^

        // Letters — Row 3/3
        key <LSGT> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [ecircumflex, ecircumflex, dead_1, dead_1, x] }; // ê ê ^ ^ x
        key <AB01> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [eacute, eacute, slash, division, c] }; // é é / ÷ c
        key <AB02> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [agrave, agrave, backslash, dead_6, v] }; // à à \ ᵢ v
        key <AB03> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [j, j, quotedbl, j, j] }; // j j " j j
        key <AB04> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [comma, semicolon, semicolon, ellipsis, comma] }; // , " ;" ; … ,
        key <AB05> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [k, k, ellipsis, NoSymbol, k] }; // k k …  k
        key <AB06> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [m, m, ampersand, NoSymbol, m] }; // m m & − m
        key <AB07> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [d, d, dollar, section, d] }; // d d $ § d
        key <AB08> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [l, l, equal, notequal, l] }; // l l = ≠ l
        key <AB09> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [p, p, plus, plusminus, p] }; // p p + ± p
        key <AB10> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC_CONTROL", [apostrophe, question, question, questiondown, apostrophe] }; // ' " ?" ? ¿ '

        include "level3(ralt_switch)"
    };

    xkb_geometry { include "latin" };

};
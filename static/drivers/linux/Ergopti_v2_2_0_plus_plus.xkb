xkb_keymap        {

xkb_keycodes      { include "evdev+aliases(azerty)" };

xkb_types         { 
    include "complete"

    type "SEVEN_LEVEL_KEY" {
        modifiers = Shift + Lock + LevelThree + Control + Alt + Mod4;

        // ==============================
        // ======= Level mappings =======
        // ==============================

        map[None]                               = Level1;

        // Level 2: CapsLock only
        map[Lock]                               = Level2;

        // Level 3: Shift only
        map[Shift]                              = Level3;

        // Level 4: CapsLock + Shift
        map[Lock + Shift]                       = Level4;

        // Level 5: Other modifiers (Control, Alt, Super)
        map[Alt]                                = Level5;
        map[Control]                            = Level5;
        map[Mod4]                               = Level5;
        map[Control + Alt]                      = Level5;
        map[Control + Mod4]                     = Level5;
        map[Alt + Mod4]                         = Level5;
        map[Control + Alt + Mod4]               = Level5;
        map[Shift + Alt]                        = Level5;
        map[Shift + Control]                    = Level5;
        map[Shift + Mod4]                       = Level5;
        map[Shift + Control + Alt]              = Level5;
        map[Shift + Control + Mod4]             = Level5;
        map[Shift + Alt + Mod4]                 = Level5;
        map[Shift + Control + Alt + Mod4]       = Level5;

        // Level 6: AltGr (LevelThree)
        map[LevelThree]                         = Level6;
        map[Lock + LevelThree]                  = Level6;

        // Level 7: Shift + AltGr
        map[Shift + LevelThree]                 = Level7;
        map[Lock + Shift + LevelThree]          = Level7;

        // =====================================
        // ======= Modifier preservation =======
        // =====================================

        // Keep these modifiers active in the final key event
        preserve[Alt]                           = Alt;
        preserve[Control]                       = Control;
        preserve[Mod4]                          = Mod4;
        preserve[Control + Alt]                 = Control + Alt;
        preserve[Control + Mod4]                = Control + Mod4;
        preserve[Alt + Mod4]                    = Alt + Mod4;
        preserve[Control + Alt + Mod4]          = Control + Alt + Mod4;
        preserve[Shift + Alt]                   = Shift + Alt;
        preserve[Shift + Control]               = Shift + Control;
        preserve[Shift + Mod4]                  = Shift + Mod4;
        preserve[Shift + Control + Alt]         = Shift + Control + Alt;
        preserve[Shift + Control + Mod4]        = Shift + Control + Mod4;
        preserve[Shift + Alt + Mod4]            = Shift + Alt + Mod4;
        preserve[Shift + Control + Alt + Mod4]  = Shift + Control + Alt + Mod4;

        // ===========================
        // ======= Level names =======
        // ===========================
        
        level_name[Level1]                      = "Base";
        level_name[Level2]                      = "CapsLock";
        level_name[Level3]                      = "Shift";
        level_name[Level4]                      = "CapsLock + Shift";
        level_name[Level5]                      = "Other modifiers: Control, Alt, Super";
        level_name[Level6]                      = "AltGr";
        level_name[Level7]                      = "Shift + AltGr";
    };

};

xkb_compatibility { include "complete" };

partial alphanumeric_keys
xkb_symbols "Ergopti_v2_2_0_plus_plus" {

	name[Group1] = "France - Ergopti++ v2.2.0 Beta 3";

	include "latin"

        // Space bar
        key <SPCE> { type[group1] = "SEVEN_LEVEL_KEY", [space, space, minus, minus, space, underscore, fiveeighths] }; //     - -   _ " - "

        // Digits
        key <TLDE> { type[group1] = "SEVEN_LEVEL_KEY", [dollar, dollar, fivesixths, fivesixths, dollar, EuroSign, dead_currency] }; // $ $ " €" " €" $ € ¤
        key <AE01> { type[group1] = "SEVEN_LEVEL_KEY", [1, 1, 1, 1, 1, onesuperior, U2081] }; // 1 1 1 1 1 ¹ ₁
        key <AE02> { type[group1] = "SEVEN_LEVEL_KEY", [2, 2, 2, 2, 2, twosuperior, U2082] }; // 2 2 2 2 2 ² ₂
        key <AE03> { type[group1] = "SEVEN_LEVEL_KEY", [3, 3, 3, 3, 3, threesuperior, U2083] }; // 3 3 3 3 3 ³ ₃
        key <AE04> { type[group1] = "SEVEN_LEVEL_KEY", [4, 4, 4, 4, 4, U2074, U2084] }; // 4 4 4 4 4 ⁴ ₄
        key <AE05> { type[group1] = "SEVEN_LEVEL_KEY", [5, 5, 5, 5, 5, U2075, U2085] }; // 5 5 5 5 5 ⁵ ₅
        key <AE06> { type[group1] = "SEVEN_LEVEL_KEY", [6, 6, 6, 6, 6, U2076, U2086] }; // 6 6 6 6 6 ⁶ ₆
        key <AE07> { type[group1] = "SEVEN_LEVEL_KEY", [7, 7, 7, 7, 7, U2077, U2087] }; // 7 7 7 7 7 ⁷ ₇
        key <AE08> { type[group1] = "SEVEN_LEVEL_KEY", [8, 8, 8, 8, 8, U2078, U2088] }; // 8 8 8 8 8 ⁸ ₈
        key <AE09> { type[group1] = "SEVEN_LEVEL_KEY", [9, 9, 9, 9, 9, U2079, U2089] }; // 9 9 9 9 9 ⁹ ₉
        key <AE10> { type[group1] = "SEVEN_LEVEL_KEY", [0, 0, 0, 0, 0, U2070, U2080] }; // 0 0 0 0 0 ⁰ ₀
        key <AE11> { type[group1] = "SEVEN_LEVEL_KEY", [percent, percent, fourfifths, fourfifths, minus, U2030, U2031] }; // % % " %" " %" - ‰ ‱
        key <AE12> { type[group1] = "SEVEN_LEVEL_KEY", [equal, equal, masculine, masculine, plus, degree, ordfeminine] }; // = = º º + ° ª

        // Letters — Row 1/3
        key <AD01> { type[group1] = "SEVEN_LEVEL_KEY", [egrave, Egrave, Egrave, egrave, z, grave, doublelowquotemark] }; // è È È è z ` „
        key <AD02> { type[group1] = "SEVEN_LEVEL_KEY", [y, Y, Y, y, y, at, EuroSign] }; // y Y Y y y @ €
        key <AD03> { type[group1] = "SEVEN_LEVEL_KEY", [o, O, O, o, o, percent, OE] }; // o O O o o % Œ
        key <AD04> { type[group1] = "SEVEN_LEVEL_KEY", [w, W, W, w, w, seveneighths, threeeighths] }; // w W W w w "où" "Où"
        key <AD05> { type[group1] = "SEVEN_LEVEL_KEY", [b, B, B, b, b, guillemotleft, leftdoublequotemark] }; // b B B b b "« " “
        key <AD06> { type[group1] = "SEVEN_LEVEL_KEY", [f, F, F, f, f, guillemotright, rightdoublequotemark] }; // f F F f f " »" ”
        key <AD07> { type[group1] = "SEVEN_LEVEL_KEY", [g, G, G, g, g, asciitilde, U2248] }; // g G G g g ~ ≈
        key <AD08> { type[group1] = "SEVEN_LEVEL_KEY", [h, H, H, h, h, numbersign, percent] }; // h H H h h # %
        key <AD09> { type[group1] = "SEVEN_LEVEL_KEY", [c, C, C, c, c, exclam, onefifth] }; // c C C c c ! " !"
        key <AD10> { type[group1] = "SEVEN_LEVEL_KEY", [x, X, X, x, x, asterisk, multiply] }; // x X X x x * ×
        key <AD11> { type[group1] = "SEVEN_LEVEL_KEY", [z, Z, Z, z, z, percent, U2030] }; // z Z Z z z % ‰
        key <AD12> { type[group1] = "SEVEN_LEVEL_KEY", [dead_diaeresis, dead_diaeresis, U202F, U202F, diaeresis, nobreakspace, NoSymbol] }; // ¨ ¨     ¨   

        // Letters — Row 2/3
        key <AC01> { type[group1] = "SEVEN_LEVEL_KEY", [a, A, A, a, a, less, lessthanequal] }; // a A A a a < ≤
        key <AC02> { type[group1] = "SEVEN_LEVEL_KEY", [i, I, I, i, i, greater, greaterthanequal] }; // i I I i i > ≥
        key <AC03> { type[group1] = "SEVEN_LEVEL_KEY", [e, E, E, e, e, braceleft, uparrow] }; // e E E e e { ᵉ
        key <AC04> { type[group1] = "SEVEN_LEVEL_KEY", [u, U, U, u, u, braceright, mu] }; // u U U u u } µ
        key <AC05> { type[group1] = "SEVEN_LEVEL_KEY", [period, period, oneeighth, oneeighth, period, colon, periodcentered] }; // . . " :" " :" . : ·
        key <AC06> { type[group1] = "SEVEN_LEVEL_KEY", [v, V, V, v, v, bar, brokenbar] }; // v V V v v | ¦
        key <AC07> { type[group1] = "SEVEN_LEVEL_KEY", [s, S, S, s, s, parenleft, emdash] }; // s S S s s ( —
        key <AC08> { type[group1] = "SEVEN_LEVEL_KEY", [n, N, N, n, n, parenright, endash] }; // n N N n n ) –
        key <AC09> { type[group1] = "SEVEN_LEVEL_KEY", [t, T, T, t, t, bracketleft, dead_diaeresis] }; // t T T t t [ ¨
        key <AC10> { type[group1] = "SEVEN_LEVEL_KEY", [r, R, R, r, r, bracketright, infinity] }; // r R R r r ] ℝ
        key <AC11> { type[group1] = "SEVEN_LEVEL_KEY", [q, Q, Q, q, q, rightsinglequotemark, dead_currency] }; // q Q Q q q ’ ¤
        key <BKSL> { type[group1] = "SEVEN_LEVEL_KEY", [dead_circumflex, dead_circumflex, onefifth, onefifth, asciicircum, exclam, exclamdown] }; // ^ ^ " !" " !" ^ ! ¡

        // Letters — Row 3/3
        key <LSGT> { type[group1] = "SEVEN_LEVEL_KEY", [ecircumflex, Ecircumflex, Ecircumflex, ecircumflex, x, asciicircum, dead_circumflex] }; // ê Ê Ê ê x ^ ^
        key <AB01> { type[group1] = "SEVEN_LEVEL_KEY", [eacute, Eacute, Eacute, eacute, c, slash, division] }; // é É É é c / ÷
        key <AB02> { type[group1] = "SEVEN_LEVEL_KEY", [agrave, Agrave, Agrave, agrave, v, backslash, downarrow] }; // à À À à v \ ᵢ
        key <AB03> { type[group1] = "SEVEN_LEVEL_KEY", [j, J, J, j, j, quotedbl, j] }; // j J J j j " j
        key <AB04> { type[group1] = "SEVEN_LEVEL_KEY", [comma, comma, onesixth, onesixth, comma, semicolon, ellipsis] }; // , , " ;" " ;" , ; …
        key <AB05> { type[group1] = "SEVEN_LEVEL_KEY", [k, K, K, k, k, ellipsis, NoSymbol] }; // k K K k k … 
        key <AB06> { type[group1] = "SEVEN_LEVEL_KEY", [m, M, M, m, m, ampersand, U2212] }; // m M M m m & −
        key <AB07> { type[group1] = "SEVEN_LEVEL_KEY", [d, D, D, d, d, dollar, section] }; // d D D d d $ §
        key <AB08> { type[group1] = "SEVEN_LEVEL_KEY", [l, L, L, l, l, equal, notequal] }; // l L L l l = ≠
        key <AB09> { type[group1] = "SEVEN_LEVEL_KEY", [p, P, P, p, p, plus, plusminus] }; // p P P p p + ±
        key <AB10> { type[group1] = "SEVEN_LEVEL_KEY", [apostrophe, apostrophe, onethird, onethird, apostrophe, question, questiondown] }; // ' ' " ?" " ?" ' ? ¿

	include "level3(ralt_switch)"
};

xkb_geometry { include "latin" };

};


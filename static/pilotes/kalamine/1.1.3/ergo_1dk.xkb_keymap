// Generated by kalamine on 2024-11-13
//
// This is a standalone XKB keymap file. To apply this keymap, use:
//   xkbcomp -w9 ergo_1dk.xkb_keymap $DISPLAY
//
// DO NOT COPY THIS INTO xkb/symbols: THIS WOULD MESS UP YOUR XKB CONFIG.
//
// File          : ergo_1dk.xkb_keymap
// Project page  : https://ergopti.fr
// Author        : Adrien MOYAUX
// Version       : 1.1.2
// License       : WTFPL - Do What The Fuck You Want Public License
//
// Disposition Ergopti, pour une saisie plus rapide de texte.
//

xkb_keymap {
  xkb_keycodes      { include "evdev"    };
  xkb_types         { include "complete" };
  xkb_compatibility { include "complete" };

  // Base layer + dead key
  // ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
  // ┆ +   ┃ 1   │ 2   │ 3   │ 4   │ 5   ┃ 6   │ 7   │ 8   │ 9   │ º   ┃ €   ┆ %   ┆
  // ┆ =   ┃ 1   │ 2   │ 3   │ 4   │ 5   ┃ 6   │ 7   │ 8   │ 9   │ 0 ° ┃ €   ┆ %   ┆
  // ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃ Z   │ Y   │ O   │ W   │ B   ┃ F   │ D   │ L   │ P   │ ?   ┃ {   ┆ }   ┆
  //       ┃   á │   í │     │     │     ┃     │     │   û │   q │ ’ ? ┃ [   ┆ ]   ┆
  //       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃ A   │ I   │ E   │ U   │ K   ┃ V   │ S   │ N   │ T   │ R   ┃ "   ┆ |   ┆
  //       ┃   è │   é │   œ │     │     ┃     │     │   ô │     │     ┃ '   ┆ \   ┆
  // ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
  // ┆ Ê   ┃ :   │ J   │ À   │*¨   │ ;   ┃ M   │ C   │ H   │ G   │ X   ┃
  // ┆   ^ ┃ . ù │   æ │   ê │***¨ │ ,   ┃   ñ │   ç │   î │     │   â ┃
  // ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

  // AltGr layer
  // ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
  // ┆     ┃   ¹ │   ² │   ³ │   ⁴ │   ⁵ ┃   ⁶ │   ⁷ │   ⁸ │   ⁹ │   ⁰ ┃     ┆     ┆
  // ┆     ┃   ₁ │   ₂ │   ₃ │   ₄ │   ₅ ┃   ₆ │   ₇ │   ₈ │   ₉ │   ₀ ┃     ┆     ┆
  // ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃   „ │   „ │     │     │   “ ┃   ” │   § │   ≠ │   ± │   ¿ ┃     ┆     ┆
  //       ┃   ` │   @ │   % │   ! │   « ┃   » │   $ │   = │   + │   ' ┃     ┆     ┆
  //       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃     │     │     │     │     ┃     │   — │   – │     │     ┃     ┆     ┆
  //       ┃   < │   > │   { │   } │   \ ┃   | │   ( │   ) │   [ │   ] ┃     ┆     ┆
  // ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
  // ┆     ┃   … │     │     │     │   · ┃   − │   € │   £ │   ≈ │   × ┃
  // ┆     ┃   : │   / │   = │   " │   ; ┃   & │   ^ │   # │   ~ │   * ┃
  // ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

  partial alphanumeric_keys modifier_keys
  xkb_symbols "1DK" {
    include "pc"
    include "inet(evdev)"

    // The “OneDeadKey” is an ISO_Level3_Latch, i.e. a “dead AltGr” key.
    // This is the only way to have a multi-purpose dead key with XKB.

    // The real AltGr key should be an ISO_Level5_Switch; however,
    // ISO_Level5_Switch does not work as expected when applying this layout
    // with xkbcomp, so let’s use two groups instead and make the AltGr key a
    // group selector.

    name[group1]= "Disposition Ergopti, pour une saisie plus rapide de texte.";
    name[group2]= "AltGr";

    key.type[group1] = "FOUR_LEVEL";
    key.type[group2] = "TWO_LEVEL";

    // Digits
    key <AE01> {[ 1               , 1               , VoidSymbol      , VoidSymbol      ],[ U2081           , onesuperior     ]}; // 1 1     ₁ ¹
    key <AE02> {[ 2               , 2               , VoidSymbol      , VoidSymbol      ],[ U2082           , twosuperior     ]}; // 2 2     ₂ ²
    key <AE03> {[ 3               , 3               , VoidSymbol      , VoidSymbol      ],[ U2083           , threesuperior   ]}; // 3 3     ₃ ³
    key <AE04> {[ 4               , 4               , VoidSymbol      , VoidSymbol      ],[ U2084           , U2074           ]}; // 4 4     ₄ ⁴
    key <AE05> {[ 5               , 5               , VoidSymbol      , VoidSymbol      ],[ U2085           , U2075           ]}; // 5 5     ₅ ⁵
    key <AE06> {[ 6               , 6               , VoidSymbol      , VoidSymbol      ],[ U2086           , U2076           ]}; // 6 6     ₆ ⁶
    key <AE07> {[ 7               , 7               , VoidSymbol      , VoidSymbol      ],[ U2087           , U2077           ]}; // 7 7     ₇ ⁷
    key <AE08> {[ 8               , 8               , VoidSymbol      , VoidSymbol      ],[ U2088           , U2078           ]}; // 8 8     ₈ ⁸
    key <AE09> {[ 9               , 9               , VoidSymbol      , VoidSymbol      ],[ U2089           , U2079           ]}; // 9 9     ₉ ⁹
    key <AE10> {[ 0               , masculine       , degree          , VoidSymbol      ],[ U2080           , U2070           ]}; // 0 º °   ₀ ⁰

    // Letters, first row
    key <AD01> {[ z               , Z               , aacute          , Aacute          ],[ grave           , U201E           ]}; // z Z á Á ` „
    key <AD02> {[ y               , Y               , iacute          , Iacute          ],[ at              , U201E           ]}; // y Y í Í @ „
    key <AD03> {[ o               , O               , VoidSymbol      , VoidSymbol      ],[ percent         , VoidSymbol      ]}; // o O     %
    key <AD04> {[ w               , W               , VoidSymbol      , VoidSymbol      ],[ exclam          , VoidSymbol      ]}; // w W     !
    key <AD05> {[ b               , B               , VoidSymbol      , VoidSymbol      ],[ guillemotleft   , U201C           ]}; // b B     « “
    key <AD06> {[ f               , F               , VoidSymbol      , VoidSymbol      ],[ guillemotright  , U201D           ]}; // f F     » ”
    key <AD07> {[ d               , D               , VoidSymbol      , VoidSymbol      ],[ dollar          , section         ]}; // d D     $ §
    key <AD08> {[ l               , L               , ucircumflex     , Ucircumflex     ],[ equal           , notequal        ]}; // l L û Û = ≠
    key <AD09> {[ p               , P               , q               , Q               ],[ plus            , plusminus       ]}; // p P q Q + ±
    key <AD10> {[ U2019           , question        , question        , VoidSymbol      ],[ apostrophe      , questiondown    ]}; // ’ ? ?   ' ¿

    // Letters, second row
    key <AC01> {[ a               , A               , egrave          , Egrave          ],[ less            , lessthanequal   ]}; // a A è È < ≤
    key <AC02> {[ i               , I               , eacute          , Eacute          ],[ greater         , greaterthanequal]}; // i I é É > ≥
    key <AC03> {[ e               , E               , oe              , OE              ],[ braceleft       , VoidSymbol      ]}; // e E œ Œ {
    key <AC04> {[ u               , U               , VoidSymbol      , VoidSymbol      ],[ braceright      , VoidSymbol      ]}; // u U     }
    key <AC05> {[ k               , K               , VoidSymbol      , VoidSymbol      ],[ backslash       , VoidSymbol      ]}; // k K     \ 
    key <AC06> {[ v               , V               , VoidSymbol      , VoidSymbol      ],[ bar             , brokenbar       ]}; // v V     | ¦
    key <AC07> {[ s               , S               , VoidSymbol      , VoidSymbol      ],[ parenleft       , emdash          ]}; // s S     ( —
    key <AC08> {[ n               , N               , ocircumflex     , Ocircumflex     ],[ parenright      , endash          ]}; // n N ô Ô ) –
    key <AC09> {[ t               , T               , VoidSymbol      , VoidSymbol      ],[ bracketleft     , VoidSymbol      ]}; // t T     [
    key <AC10> {[ r               , R               , VoidSymbol      , VoidSymbol      ],[ bracketright    , VoidSymbol      ]}; // r R     ]

    // Letters, third row
    key <AB01> {[ period          , colon           , ugrave          , Ugrave          ],[ colon           , ellipsis        ]}; // . : ù Ù : …
    key <AB02> {[ j               , J               , ae              , AE              ],[ slash           , VoidSymbol      ]}; // j J æ Æ /
    key <AB03> {[ agrave          , Agrave          , ecircumflex     , Ecircumflex     ],[ equal           , VoidSymbol      ]}; // à À ê Ê =
    key <AB04> {[ ISO_Level3_Latch, dead_diaeresis  , dead_diaeresis  , VoidSymbol      ],[ quotedbl        , VoidSymbol      ]}; // *¨ ¨ ¨   "
    key <AB05> {[ comma           , semicolon       , VoidSymbol      , VoidSymbol      ],[ semicolon       , periodcentered  ]}; // , ;     ; ·
    key <AB06> {[ m               , M               , ntilde          , Ntilde          ],[ ampersand       , U2212           ]}; // m M ñ Ñ & −
    key <AB07> {[ c               , C               , ccedilla        , Ccedilla        ],[ asciicircum     , EuroSign        ]}; // c C ç Ç ^ €
    key <AB08> {[ h               , H               , icircumflex     , Icircumflex     ],[ numbersign      , sterling        ]}; // h H î Î # £
    key <AB09> {[ g               , G               , VoidSymbol      , VoidSymbol      ],[ asciitilde      , U2248           ]}; // g G     ~ ≈
    key <AB10> {[ x               , X               , acircumflex     , Acircumflex     ],[ asterisk        , multiply        ]}; // x X â Â * ×

    // Pinky keys
    key <AE11> {[ EuroSign        , EuroSign        , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // € €
    key <AE12> {[ percent         , percent         , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // % %
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // [ {
    key <AD12> {[ bracketright    , braceright      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ] }
    key <AC11> {[ apostrophe      , quotedbl        , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ' "
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ equal           , plus            , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // = +
    key <BKSL> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // \ |
    key <LSGT> {[ ecircumflex     , Ecircumflex     , asciicircum     , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ê Ê ^

    // Space bar
    key <SPCE> {[ space           , minus           , nobreakspace    , nobreakspace    ],[ underscore      , nobreakspace    ]}; //   -     _

    // AltGr
    // Note: the `ISO_Level5_Latch` here is meaningless but helps with Chromium.
    key <RALT> {
      type = "TWO_LEVEL",
      symbols = [ ISO_Level5_Latch, ISO_Level5_Latch ],
      actions = [ SetGroup(group=2), SetGroup(group=2) ]
    };
  };
};
// vim: ft=xkb:fdm=indent:ts=2:nowrap

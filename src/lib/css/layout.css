/* Le code ci-dessous permet (notamment) de toujours placer le footer en bas de la page */

/* « Je vous conseille fortement d’utiliser un conteneur global, comme ici avec #page, pour réaliser ce genre de mise en page.
 * En effet, définir un contexte flex directement sur <body> comme on peut le voir sur d’autres d’articles peut causer des problèmes avec les plugins
 * qui créent des éléments en bas de page avant </body> (popup, autocomplete, etc.).
 * Ces éléments risquent de ne pas s’afficher correctement, à cause du contexte flex hérité. Just saying. »
 */

#page {
	display: flex;
	flex-direction: column;
	margin: 0;
	min-height: 100vh;
	padding: 0;
}

#main-content {
	overflow-x: hidden; /* Très important pour que les animations AOS horizontales n’agrandissent pas l’écran */
	width: var(--largeur-main);
}

bloc-main {
	background: #00000090;
	display: flex;
	flex-direction: row;
	padding-bottom: 10vh;
}

main,
.main {
	overflow-x: hidden; /* Très important pour que les animations AOS horizontales n’agrandissent pas l’écran */
}

#sidebar {
	margin-top: 7vh;
	width: calc(100vw - var(--largeur-main));
}

#sidebar > div {
	background: rgba(0, 0, 0, 0.6);
	border: 1px solid rgba(255, 255, 255, 0.3);
	border-left: none;
	border-radius: 0 10px 10px 0;
	height: fit-content;
	max-height: calc(100vh - var(--header-height) -var(--banner-height) - 4rem);
	/* box-shadow: 0px 0px 6px 3px var(--couleur-ombre); */
	overflow: auto;
	padding: 1rem;
	position: sticky;
	top: calc(var(--header-height) + var(--banner-height) + 2rem);
}

@media (max-width: 1280px) {
	#sidebar {
		display: none;
	}
	#main-content {
		width: 100vw;
	}
	#menu-page-content {
		display: block;
	}
	#page-toc-mobile {
		padding-left: var(--marge-fenetre);
	}
}
@media (min-width: 1280px) {
	#menu-page-content {
		display: none;
	}
}

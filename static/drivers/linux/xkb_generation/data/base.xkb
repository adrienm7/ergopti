xkb_keymap        {

xkb_keycodes      { include "evdev+aliases(azerty)" };

xkb_types         { 
    include "complete"

// Key types for Ergopti layout
    type "FOUR_LEVEL_CONTROL" {
        modifiers = Shift+LevelThree+Control;
        
        map[None] = Level1;
        map[Shift] = Level2;
        map[LevelThree] = Level3;
        map[Shift+LevelThree] = Level4;
        map[Control]  = Level5;
        map[Control+Shift] = Level6;

        preserve[Control] = Control;
        preserve[Shift+Control] = Control;
        
        level_name[Level1] = "Base";
        level_name[Level2] = "Shift";
        level_name[Level3] = "Alt Base";
        level_name[Level4] = "Shift Alt";
        level_name[Level5] = "Control";
	    level_name[Level6] = "Shift Control";
    };

    type "FOUR_LEVEL_ALPHABETIC_CONTROL" {
        modifiers = Shift+Lock+LevelThree+Control;
        
        map[None] = Level1;
        map[Shift] = Level2;
        map[Lock]  = Level2;
        map[LevelThree] = Level3;
        map[Shift+LevelThree] = Level4;
        map[Lock+LevelThree] =  Level4;
        map[Lock+Shift+LevelThree] =  Level3;
        map[Control]  = Level5;
        map[Control+Shift] = Level6;

        preserve[Control] = Control;
        preserve[Shift+Control] = Control;
        
        level_name[Level1] = "Base";
        level_name[Level2] = "Shift";
        level_name[Level3] = "Alt Base";
        level_name[Level4] = "Shift Alt";
        level_name[Level5] = "Control";
        level_name[Level6] = "Shift Control";
    };

    type "FOUR_LEVEL_SEMIALPHABETIC_CONTROL" {
        modifiers = Shift+Lock+LevelThree+Control;
        
        map[None] = Level1;
        map[Shift] = Level2;
        map[Lock]  = Level2;
        map[LevelThree] = Level3;
        map[Shift+LevelThree] = Level4;
        map[Lock+LevelThree] =  Level3;
        map[Lock+Shift+LevelThree] = Level4;
        map[Control]  = Level5;
        map[Control+Shift] = Level6;
        
        preserve[Control] = Control;
        preserve[Shift+Control] = Control;
        preserve[Lock+LevelThree] = Lock;
        preserve[Lock+Shift+LevelThree] = Lock;
        
        level_name[Level1] = "Base";
        level_name[Level2] = "Shift";
        level_name[Level3] = "Alt Base";
        level_name[Level4] = "Shift Alt";
        level_name[Level5] = "Control";
        level_name[Level6] = "Shift Control";
    };
            
};

xkb_compatibility { include "complete" };

partial alphanumeric_keys
xkb_symbols "ergopti_iso_18" {

	name[Group1]= "France - Ergopti";

	include "latin"

        // Space bar
        key <SPCE> { [] };

        // Digits
        key <TLDE> { [] };
        key <AE01> { [] };
        key <AE02> { [] };
        key <AE03> { [] };
        key <AE04> { [] };
        key <AE05> { [] };
        key <AE06> { [] };
        key <AE07> { [] };
        key <AE08> { [] };
        key <AE09> { [] };
        key <AE10> { [] };
        key <AE11> { [] };
        key <AE12> { [] };

        // Letters — Row 1/3
        key <AD01> { [] };
        key <AD02> { [] };
        key <AD03> { [] };
        key <AD04> { [] };
        key <AD05> { [] };
        key <AD06> { [] };
        key <AD07> { [] };
        key <AD08> { [] };
        key <AD09> { [] };
        key <AD10> { [] };
        key <AD11> { [] };
        key <AD12> { [] };

        // Letters — Row 2/3
        key <AC01> { [] };
        key <AC02> { [] };
        key <AC03> { [] };
        key <AC04> { [] };
        key <AC05> { [] };
        key <AC06> { [] };
        key <AC07> { [] };
        key <AC08> { [] };
        key <AC09> { [] };
        key <AC10> { [] };
        key <AC11> { [] };
        key <BKSL> { [] };

        // Letters — Row 3/3
        key <LSGT> { [] };
        key <AB01> { [] };
        key <AB02> { [] };
        key <AB03> { [] };
        key <AB04> { [] };
        key <AB05> { [] };
        key <AB06> { [] };
        key <AB07> { [] };
        key <AB08> { [] };
        key <AB09> { [] };
        key <AB10> { [] };

	include "level3(ralt_switch)"
};

xkb_geometry { include "latin" };

};


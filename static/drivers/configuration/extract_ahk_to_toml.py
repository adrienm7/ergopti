#!/usr/bin/env python3
"""
Script pour extraire les blocs de text expansion d'un fichier AutoHotkey
et les convertir au format TOML.
"""

import re
from pathlib import Path


def extract_ahk_block_to_toml(
    ahk_file_path: str, block_pattern: str, output_name: str
) -> None:
    """
    Extrait un bloc spécifique d'un fichier AutoHotkey et le convertit en TOML.

    Args:
        ahk_file_path: Chemin vers le fichier .ahk source
        block_pattern: Pattern du bloc à extraire (ex: 'TextExpansionEmojis')
        output_name: Nom du fichier de sortie sans extension (ex: 'emojis')
    """

    # Chemin du fichier de sortie TOML
    output_dir = Path(__file__).parent
    output_file = output_dir / f"{output_name}.toml"

    # Lire le fichier AutoHotkey
    try:
        with open(ahk_file_path, "r", encoding="utf-8") as f:
            content = f.read()
    except FileNotFoundError:
        print(f"Erreur: Fichier {ahk_file_path} non trouvé")
        return
    except Exception as e:
        print(f"Erreur lors de la lecture du fichier: {e}")
        return

    # Pattern pour trouver le bloc spécifique
    block_regex = rf'if Features\["MagicKey"\]\["{block_pattern}"\]\.Enabled \{{(.*?)\n\}}'

    # Rechercher le bloc
    match = re.search(block_regex, content, re.DOTALL)

    if not match:
        print(f"Bloc '{block_pattern}' non trouvé dans {ahk_file_path}")
        return

    block_content = match.group(1)

    # Extraire les hotstrings
    hotstrings = extract_hotstrings(block_content)

    # Convertir en TOML
    toml_content = convert_to_toml(hotstrings, block_pattern)

    # Écrire le fichier TOML
    try:
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(toml_content)
        print(
            f"Fichier {output_file} créé avec succès ({len(hotstrings)} entrées)"
        )
    except Exception as e:
        print(f"Erreur lors de l'écriture du fichier: {e}")


def extract_hotstrings(block_content: str) -> dict:
    """
    Extrait les hotstrings d'un bloc de contenu AutoHotkey.

    Args:
        block_content: Contenu du bloc AutoHotkey

    Returns:
        Dictionnaire avec sections et leurs hotstrings
    """

    hotstrings = {}
    current_section = "general"

    lines = block_content.split("\n")

    for line in lines:
        line = line.strip()

        # Détecter les sections (commentaires === Section ===)
        section_match = re.match(r";\s*===\s*(.+?)\s*===", line)
        if section_match:
            section_name = section_match.group(1).lower()
            # Nettoyer le nom de section pour TOML
            section_name = re.sub(r"[^a-z0-9_]", "_", section_name)
            section_name = re.sub(r"_+", "_", section_name).strip("_")
            current_section = section_name
            if current_section not in hotstrings:
                hotstrings[current_section] = []
            continue

        # Ignorer les commentaires simples et lignes vides
        if line.startswith(";") or not line:
            continue

        # Extraire les hotstrings CreateHotstring et CreateCaseSensitiveHotstrings
        hotstring_patterns = [
            r'CreateHotstring\("[^"]*",\s*"([^"]+)"\s*\.\s*ScriptInformation\["MagicKey"\],\s*"([^"]+)"\)',
            r'CreateCaseSensitiveHotstrings\("[^"]*",\s*"([^"]+)"\s*\.\s*ScriptInformation\["MagicKey"\],\s*"([^"]+)"\)',
        ]

        for pattern in hotstring_patterns:
            match = re.search(pattern, line)
            if match:
                trigger = match.group(1)
                output = match.group(2)

                # Initialiser la section si elle n'existe pas
                if current_section not in hotstrings:
                    hotstrings[current_section] = []

                hotstrings[current_section].append((trigger, output))
                break

    return hotstrings


def convert_to_toml(hotstrings: dict, block_name: str) -> str:
    """
    Convertit les hotstrings en format TOML.

    Args:
        hotstrings: Dictionnaire des hotstrings par section
        block_name: Nom du bloc original pour le commentaire d'en-tête

    Returns:
        Contenu TOML formaté
    """

    toml_lines = [
        "# DO NOT EDIT THIS FILE DIRECTLY.",
        "# This file is automatically generated. Any manual changes will be overwritten.",
        "# Format: [[section]]",
        "# Each entry: trigger = output",
        "",
    ]

    for section_name, entries in hotstrings.items():
        if not entries:
            continue

        toml_lines.append(f"[[{section_name}]]")

        for trigger, output in entries:
            # Échapper les guillemets dans les chaînes TOML
            trigger_escaped = trigger.replace('"', '\\"')
            output_escaped = output.replace('"', '\\"')

            toml_lines.append(f'"{trigger_escaped}" = "{output_escaped}"')

        toml_lines.append("")  # Ligne vide entre sections

    return "\n".join(toml_lines)


def main():
    """Fonction principale - extrait les différents blocs."""

    # Chemin vers le fichier AHK source
    ahk_file = str(
        Path(__file__).parent.parent / "autohotkey" / "ErgoptiPlus_v2.2.0.ahk"
    )

    # Extractions à effectuer
    extractions = [
        ("TextExpansionEmojis", "emojis"),
        ("TextExpansion", "magic"),
        ("TextExpansionSymbols", "symbols"),
        ("TextExpansionSymbolsTypst", "symbols_typst"),
    ]

    print("Extraction des blocs AutoHotkey vers TOML...")
    print(f"Fichier source: {ahk_file}")
    print("-" * 50)

    for block_pattern, output_name in extractions:
        print(
            f"Extraction du bloc '{block_pattern}' vers '{output_name}.toml'..."
        )
        extract_ahk_block_to_toml(ahk_file, block_pattern, output_name)

    print("-" * 50)
    print("Extraction terminée.")


if __name__ == "__main__":
    main()
